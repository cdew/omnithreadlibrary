?? bug in TOmniBaseBoundedQueue ??

- TOmniValue:
  - Fixed memory leak when sending String, WideString, Variant and Extended values over
    the communication channel and when queueing them into TOmni[Base]Queue.
  - Implemented _AddRef, _Release, _ReleaseAndClear.
  - TOmniValue can be cast as Int64.
  - Implemented conversions to/from TValue (Delphi 2010 and newer).

- TOmniMessageQueueTee
- IOmniCommDispatchingObserver
- TOmniCounter, auto-initialized wrapper around the IOmniCounter
- TOmniMessageID record, used internally to implement timers.
- TOmhiThreadPool: ThreadDataFactory can now accept either a function or a method
  (but can be used only as a method - SetThreadDataFactory).
- Added support for multiple simultaneous timers. SetTimer takes additional 'timerID'
  parameter. The old SetTimer assumes timerID = 0.
- TOmniEventMonitor: Message retrieving loop destroys interface immediately, not when the
  next message is received.
- TOmniTaskFunction renamed to TOmniTaskDelegate.
- Added function CreateResourceCount(initialCount): IOmniResourceCount.
- renamed IOmniCancellationToken.IsSignaled -> IsSignalled

1.05a: 2010-03-08
- Bug fixed: TOmniTaskControl.OnMessage(eventHandler: TOmniTaskMessageEvent) 
  was broken.
- Bug fixed: TOmniTaskControl.OnMessage/OnTerminate uses event monitor 
  created in the context of the task controller thread (was using global 
  event monitor created in the main thread).
- Implemented TOmniEventMonitorPool, per-thread TOmniEventMonitor allocator.

1.05: 2010-02-25
- Big rename: TOmniBaseStack -> TOmniBaseBoundedStack,
  TOmniStack -> TOmniBoundedStack, TOmniBaseQueue -> TOmniBaseBoundedQueue,
  TOmniQueue -> TOmniBoundedQueue, IInterfaceDictionary -> IOmniInterfaceDictionary,
  IInterfaceDictionaryEnumerator -> IOmniInterfaceDictionaryEnumerator,
  TInterfaceDictionaryPair -> TOmniInterfaceDictionaryPair.
- Implemented dynamically allocated, O(1) enqueue and dequeue, threadsafe,
  microlocking queue. Class TOmniBaseQueue contains base implementation
  while TOmniQueue adds notification support.
- Implemented resource counter with empty state signalling TOmniResourceCount.
- New unit OtlCollection which contains blocking collection implementation
  TOmniBlockingCollection.
- IOmniTask implements Implementor property which points back to the worker instance
  (but only if worker is TOmniWorker-based).
- Implemented IOmniEnvironment interface and function Environment returning
  some information on system, process and thread.
- Implemented IOmniTaskControl.UserData[]. The application can store any values
  in this array. It can be accessed via the integer or string index.
- Implemented TOmniValue.IsInteger.
- Implemented IOmniCancellationToken, used in Parallel infrastructure and in
  IOmniTaskControl.TerminateWhen.
- IOmniTaskControl and IOmniTask implement CancellationToken: IOmniCancellationToken
  property which can be used by the task and task controller.
- IOmniTaskControl implements OnMessage(msgID, handler).
- Implemented Parallel.ForEach wrapper (Delphi 2009 and newer).
- Implemented Parallel.Join wrapper (Delphi 2009 and newer).
- Refactored and enhanced TOmniValueContainer.
- TOmniTaskFunction now takes 'const' parameter.
- Bugs fixed:
  - TOmniEventMonitor.OnTaskUndeliveredMessage was missing 'message' parameter.
  - Set package names and designtime/runtime type in D2009/D2010 packages.
- New demos:
  - 32_Queue: Stress test for new TOmniBaseQueue and TOmniQueue.
  - 33_BlockingCollection: Stress test for new TOmniBlockingCollection, also demoes
    the use of Environment to set process affinity.
  - 34_TreeScan: Parallel tree scan using TOmniBlockingCollection.
  - 35_ParallelFor: Parallel tree scan using Parallel.ForEach (Delphi 2009 and newer).
  - 36_ParallelAggregate: Parallel calculations using Parallel.ForEach.Aggregate
    (Delphi 2009 and newer).
  - 37_ParallelJoin: Parallel.Join demo.

1.04b: 2009-12-18
- [ahwux, gabr] Fixed Delphi 2010 Update 4 compatibility.
- [ahwux] Added missing task interface cleanup to OnTerminated in demo 18.

1.04a: 2009-12-13
- IMPORTANT: Fixed thread pool exception handling.
- Implemented IOmniTask.RegisterWaitObject/UnregisterWaitObject.
- Added demo 31_WaitableObjects: Demo for the new RegisterWaitObject/UnregisterWaitObject API.
- Current versions of 3rd party units included.

1.04: 2009-11-23
*** COMPATIBILITY ISSUES ***
  *** Changed semantics in comm event notifications! When you get the 'new message'
      event, read all messages from the queue in a loop!
  *** Message is passed to the TOmniEventMonitor.OnTaskMessage handler. There's no need
      to read from Comm queue in the handler.
  *** Exceptions in tasks are now visible by default. To hide them, use
      IOmniTaskControl.SilentExceptions. Test 13_Exceptions was improved to demonstrate
      this behaviour.
- Works with Delphi 2010.
- Default communication queue size reduced to 1000 messages.
- Support for 'wait and send' in IOmniCommunicationEndpoint.SendWait.
- Communication subsystem implements observer pattern.
- WideStrings can be send over the communication channel.
- New event TOmniEventMonitor.OnTaskUndeliveredMessage is called after the task is
  terminated for all messages still waiting in the message queue.
- Implemented automatic event monitor with methods IOmniTaskControl.OnMessage and
  OnTerminated. Both support 'procedure of object' and 'reference to procedure'
  parameters.
- Implemented IOmniTaskControl.Unobserved behaviour modifier.
- New unit OtlSync contains (old) TOmniCS and IOmniCriticalSection together with (new)
  TOmniMREW - very simple and extremely fast multi-reader-exclusive-writer - and atomic
  CompareAndSwap functions.
- New unit OtlHooks contains API that can be used by external libraries to hook into
  OTL thread creation/destruction process and into exception chain.
- All known bugs fixed.
- Current versions of 3rd party units included.
- New demos:
  - 25_WaitableComm: Demo for ReceiveWait and SendWait.
  - 26_MultiEventMonitor: How to run multiple event monitors in parallel.
  - 27_RecursiveTree: Parallel tree processing.
  - 28_Hooks: Demo for the new hook system.
  - 29_ImplicitEventMonitor: Demo for OnMessage and OnTerminated, named method approach.
  - 30_AnonymousEventMonitor: Demo for OnMessage and OnTerminated, anonymous method approach.

1.03: 2009-02-08
- Added support for per-thread initialized data to the thread pool.
- Communication between TOmniThreadPool and TOTPWorker is protected with a critical 
  section. That allows multiple threads to Schedule tasks into one thread pool.
- Removed OnWorkerThreadCreated_Asy/OnWorkerThreadDestroyed_Asy thread pool 
  notification mechanism which was pretty much useless.
- Added connection pool demo.

1.02: 2009-02-01
- Thread pool reimplemented using OmniThreadLibrary.
- Implemented IOmniTaskControl/IOmniTask.Enforced behaviour modifier.
- Implemented IOmniTaskControlList, a list of IOmniTaskControl interfaces.
- Added background file search demo.
- Implemented TOmniCS critical section wrapper.
- Fixed a bug in TGpStringTable.Grow and TGpStringDictionary.Grow which 
  caused random memory overwrites.
- Bug fixed: One overload of SetParameter was not returning Self.
- [Jamie] Fixed bug in TOmniTaskExecutor.Asy_SetTimerInt.
- [ajasja] Fixed bug in demos 4, 5, and 6. Exceptions was raised if demo app
  was closed without stopping the background task first.
- Updated to FastMM 4.90.
- Current versions of 3rd party units included.

1.01: 2008-11-01
- [GJ] Redesigned stack cotainer with better lock contention.
- [GJ] Totally redesigned queue container, which is no longer based on stack and 
  allows multiple reader.
- Full D2009 support; D2009 packages, project files and Tests project group.
- Invoke-by-name and invoke-by-address messaging implemented
  (http://17slon.com/blogs/gabr/2008/10/erlangenizing-omnithreadlibrary.html and
  http://17slon.com/blogs/gabr/2008/10/omnithreadlibrary-using-rtti-to-call.html
  and demos 18 and 19).
- CreateTask(reference to function (task: ITaskControl)) implemented (D2009 only).
- Blocking wait (ReceiveWait) implemented (demo 19).
- Added enumerator to the IOmniTaskGroup interface.
- Implemented IOmniTaskGroup.RegisterAllWithTask and .UnregisterAllFromTask.
- Added automatic comm unregistration for IOmniTaskGroup.RegisterAllCommWith.
- Implemented IOmniTaskGroup.SendToAll. 
- New/updated tests/demos:
  - 10_Containers 
    - 2 -> 2, 1 -> 4 and 4 -> 4 tests for stacks and queues, 
    - [1, 2, 4] -> [1, 2, 4] full tests.
    - Writes CSV file with cumulative test results.
  - 17_MsgWait: demo for the .MsgWait behaviour modifier.
  - 18_StringMsgDispatch: Invoke demo.
  - 19_StringMsgBenchmark: Invoke benchmark, ReceiveWait demo.
  - 20_QuickSort: Parallel quicksort demo.
  - 21_Anonymous_methods: Anonymous methods demo (D2009 only).
- Message ID $FFFF is now reserved for internal purposes.
- Better default queue length calculation that takes into account OtlContainers 
  overhead and FastMM4 granulation.
- Bug fixed: TOmniValue.Null was not really initialized to Null.
- Bug fixed: Setting timer interval resets timer countdown.
- Bug fixed: TOmniTaskControl.Schedule always scheduled task to the global 
  thread pool.
- Current versions of 3rd party units included.

1.0a: 2008-09-02
- TGp4AlignedInt from GpStuff.pas is supposedly D2006 compatible (says a reader) 
  so it has been enabled on that plaform. As a result, it is now possible to 
  compiled and use OTL in D2006 (said the same source).
- SpinLock.pas has been updated.
- Test 6 has been changed to show why one would want to use 
  IOmniWorker.Implementor function.
- FastMM 4.88 included in the repository to simplify debugging.
  FastMM4 was created by Pierre le Riche and is not covered by the 
  OmniThreadLibrary license. It is released under a dual licensed and you can use 
  it either under the MPL 1.1 or LGPL 2.1. More details in the included readme 
  file and on the FastMM4 home page.

1.0: 2008-08-26
- Initial release.